//
// File generated by rootcint at Thu Jul  1 01:14:33 2021

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME duvallanalyze
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "duvallanalyze.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TDuvallAnalyze_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TDuvallAnalyze(void *p = 0);
   static void *newArray_TDuvallAnalyze(Long_t size, void *p);
   static void delete_TDuvallAnalyze(void *p);
   static void deleteArray_TDuvallAnalyze(void *p);
   static void destruct_TDuvallAnalyze(void *p);
   static void streamer_TDuvallAnalyze(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TDuvallAnalyze*)
   {
      ::TDuvallAnalyze *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TDuvallAnalyze >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TDuvallAnalyze", ::TDuvallAnalyze::Class_Version(), "./TDuvallAnalyze.h", 39,
                  typeid(::TDuvallAnalyze), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TDuvallAnalyze::Dictionary, isa_proxy, 0,
                  sizeof(::TDuvallAnalyze) );
      instance.SetNew(&new_TDuvallAnalyze);
      instance.SetNewArray(&newArray_TDuvallAnalyze);
      instance.SetDelete(&delete_TDuvallAnalyze);
      instance.SetDeleteArray(&deleteArray_TDuvallAnalyze);
      instance.SetDestructor(&destruct_TDuvallAnalyze);
      instance.SetStreamerFunc(&streamer_TDuvallAnalyze);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TDuvallAnalyze*)
   {
      return GenerateInitInstanceLocal((::TDuvallAnalyze*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TDuvallAnalyze*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TDuvallAnalyze::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TDuvallAnalyze::Class_Name()
{
   return "TDuvallAnalyze";
}

//______________________________________________________________________________
const char *TDuvallAnalyze::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TDuvallAnalyze*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TDuvallAnalyze::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TDuvallAnalyze*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TDuvallAnalyze::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TDuvallAnalyze*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TDuvallAnalyze::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TDuvallAnalyze*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TDuvallAnalyze::Streamer(TBuffer &R__b)
{
   // Stream an object of class TDuvallAnalyze.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fFile;
      fFileName.Streamer(R__b);
      fExperiment.Streamer(R__b);
      fExperimentPath.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TDuvallAnalyze::IsA());
   } else {
      R__c = R__b.WriteVersion(TDuvallAnalyze::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fFile;
      fFileName.Streamer(R__b);
      fExperiment.Streamer(R__b);
      fExperimentPath.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TDuvallAnalyze::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TDuvallAnalyze.
      TClass *R__cl = ::TDuvallAnalyze::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExperiment", &fExperiment);
      R__insp.InspectMember(fExperiment, "fExperiment.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExperimentPath", &fExperimentPath);
      R__insp.InspectMember(fExperimentPath, "fExperimentPath.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TDuvallAnalyze(void *p) {
      return  p ? new(p) ::TDuvallAnalyze : new ::TDuvallAnalyze;
   }
   static void *newArray_TDuvallAnalyze(Long_t nElements, void *p) {
      return p ? new(p) ::TDuvallAnalyze[nElements] : new ::TDuvallAnalyze[nElements];
   }
   // Wrapper around operator delete
   static void delete_TDuvallAnalyze(void *p) {
      delete ((::TDuvallAnalyze*)p);
   }
   static void deleteArray_TDuvallAnalyze(void *p) {
      delete [] ((::TDuvallAnalyze*)p);
   }
   static void destruct_TDuvallAnalyze(void *p) {
      typedef ::TDuvallAnalyze current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TDuvallAnalyze(TBuffer &buf, void *obj) {
      ((::TDuvallAnalyze*)obj)->::TDuvallAnalyze::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TDuvallAnalyze

/********************************************************
* duvallanalyze.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableduvallanalyze();

extern "C" void G__set_cpp_environmentduvallanalyze() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TDuvallAnalyze.h");
  G__cpp_reset_tagtableduvallanalyze();
}
#include <new>
extern "C" int G__cpp_dllrevduvallanalyze() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TDuvallAnalyze */
static int G__duvallanalyze_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TDuvallAnalyze* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TDuvallAnalyze[n];
     } else {
       p = new((void*) gvp) TDuvallAnalyze[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TDuvallAnalyze;
     } else {
       p = new((void*) gvp) TDuvallAnalyze;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TDuvallAnalyze* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TDuvallAnalyze((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TDuvallAnalyze((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TDuvallAnalyze*) G__getstructoffset())->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TDuvallAnalyze*) G__getstructoffset())->GetFileName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TDuvallAnalyze*) G__getstructoffset())->GetExperiment();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TDuvallAnalyze*) G__getstructoffset())->GetExperimentPath();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TDuvallAnalyze::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TDuvallAnalyze::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TDuvallAnalyze::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TDuvallAnalyze::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TDuvallAnalyze*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TDuvallAnalyze::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TDuvallAnalyze::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TDuvallAnalyze::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__duvallanalyze_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TDuvallAnalyze::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__duvallanalyze_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TDuvallAnalyze* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TDuvallAnalyze(*(TDuvallAnalyze*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TDuvallAnalyze G__TTDuvallAnalyze;
static int G__duvallanalyze_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TDuvallAnalyze*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TDuvallAnalyze*) (soff+(sizeof(TDuvallAnalyze)*i)))->~G__TTDuvallAnalyze();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TDuvallAnalyze*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TDuvallAnalyze*) (soff))->~G__TTDuvallAnalyze();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__duvallanalyze_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TDuvallAnalyze* dest = (TDuvallAnalyze*) G__getstructoffset();
   *dest = *(TDuvallAnalyze*) libp->para[0].ref;
   const TDuvallAnalyze& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TDuvallAnalyze */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncduvallanalyze {
 public:
  G__Sizep2memfuncduvallanalyze(): p(&G__Sizep2memfuncduvallanalyze::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncduvallanalyze::*p)();
};

size_t G__get_sizep2memfuncduvallanalyze()
{
  G__Sizep2memfuncduvallanalyze a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceduvallanalyze() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze))) {
     TDuvallAnalyze *G__Lderived;
     G__Lderived=(TDuvallAnalyze*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze),G__get_linked_tagnum(&G__duvallanalyzeLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze),G__get_linked_tagnum(&G__duvallanalyzeLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableduvallanalyze() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__duvallanalyzeLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__duvallanalyzeLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__duvallanalyzeLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__duvallanalyzeLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TDuvallAnalyze */
static void G__setup_memvarTDuvallAnalyze(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze));
   { TDuvallAnalyze *p; p=(TDuvallAnalyze*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__duvallanalyzeLN_TFile),-1,-1,4,"fFile=",0,"current ROOT datafile");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__duvallanalyzeLN_TString),-1,-1,4,"fFileName=",0,"name of current ROOT datafile");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__duvallanalyzeLN_TString),-1,-1,4,"fExperiment=",0,"name of RAT-PAC experiment");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__duvallanalyzeLN_TString),-1,-1,4,"fExperimentPath=",0,"path to RAT-PAC data directory");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__duvallanalyzeLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarduvallanalyze() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTDuvallAnalyze(void) {
   /* TDuvallAnalyze */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze));
   G__memfunc_setup("TDuvallAnalyze",1424,G__duvallanalyze_227_0_1, 105, G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TDuvallAnalyze",1424,G__duvallanalyze_227_0_2, 105, G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze), -1, 0, 1, 1, 1, 0, "C - - 10 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFile",672,G__duvallanalyze_227_0_3, 85, G__get_linked_tagnum(&G__duvallanalyzeLN_TFile), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileName",1057,G__duvallanalyze_227_0_4, 117, G__get_linked_tagnum(&G__duvallanalyzeLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExperiment",1345,G__duvallanalyze_227_0_5, 117, G__get_linked_tagnum(&G__duvallanalyzeLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExperimentPath",1742,G__duvallanalyze_227_0_6, 117, G__get_linked_tagnum(&G__duvallanalyzeLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__duvallanalyze_227_0_7, 85, G__get_linked_tagnum(&G__duvallanalyzeLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TDuvallAnalyze::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__duvallanalyze_227_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TDuvallAnalyze::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__duvallanalyze_227_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TDuvallAnalyze::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__duvallanalyze_227_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TDuvallAnalyze::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__duvallanalyzeLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__duvallanalyze_227_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__duvallanalyze_227_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TDuvallAnalyze::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__duvallanalyze_227_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TDuvallAnalyze::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__duvallanalyze_227_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TDuvallAnalyze::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__duvallanalyze_227_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TDuvallAnalyze::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TDuvallAnalyze", 1424, G__duvallanalyze_227_0_19, (int) ('i'), G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze), -1, 0, 1, 1, 1, 0, "u 'TDuvallAnalyze' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TDuvallAnalyze", 1550, G__duvallanalyze_227_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__duvallanalyze_227_0_21, (int) ('u'), G__get_linked_tagnum(&G__duvallanalyzeLN_TDuvallAnalyze), -1, 1, 1, 1, 1, 0, "u 'TDuvallAnalyze' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncduvallanalyze() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalduvallanalyze() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcduvallanalyze() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__duvallanalyzeLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__duvallanalyzeLN_TDuvallAnalyze = { "TDuvallAnalyze" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableduvallanalyze() {
  G__duvallanalyzeLN_TClass.tagnum = -1 ;
  G__duvallanalyzeLN_TBuffer.tagnum = -1 ;
  G__duvallanalyzeLN_TMemberInspector.tagnum = -1 ;
  G__duvallanalyzeLN_TObject.tagnum = -1 ;
  G__duvallanalyzeLN_TNamed.tagnum = -1 ;
  G__duvallanalyzeLN_TString.tagnum = -1 ;
  G__duvallanalyzeLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__duvallanalyzeLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__duvallanalyzeLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__duvallanalyzeLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__duvallanalyzeLN_TFile.tagnum = -1 ;
  G__duvallanalyzeLN_TDuvallAnalyze.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableduvallanalyze() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TClass);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TObject);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TNamed);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TString);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__duvallanalyzeLN_TDuvallAnalyze),sizeof(TDuvallAnalyze),-1,61696,(char*)NULL,G__setup_memvarTDuvallAnalyze,G__setup_memfuncTDuvallAnalyze);
}
extern "C" void G__cpp_setupduvallanalyze(void) {
  G__check_setup_version(30051515,"G__cpp_setupduvallanalyze()");
  G__set_cpp_environmentduvallanalyze();
  G__cpp_setup_tagtableduvallanalyze();

  G__cpp_setup_inheritanceduvallanalyze();

  G__cpp_setup_typetableduvallanalyze();

  G__cpp_setup_memvarduvallanalyze();

  G__cpp_setup_memfuncduvallanalyze();
  G__cpp_setup_globalduvallanalyze();
  G__cpp_setup_funcduvallanalyze();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncduvallanalyze();
  return;
}
class G__cpp_setup_initduvallanalyze {
  public:
    G__cpp_setup_initduvallanalyze() { G__add_setup_func("duvallanalyze",(G__incsetup)(&G__cpp_setupduvallanalyze)); G__call_setup_funcs(); }
   ~G__cpp_setup_initduvallanalyze() { G__remove_setup_func("duvallanalyze"); }
};
G__cpp_setup_initduvallanalyze G__cpp_setup_initializerduvallanalyze;

